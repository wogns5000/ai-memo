---
alwaysApply: false
---

# 다이어그램 생성 규칙

## 기본 원칙

사용자가 다이어그램, 아키텍처, 플로우차트, 시각화 등을 요청할 때는 다음 규칙을 따라야 합니다:

1. **Mermaid 다이어그램 사용**: 모든 시각화는 Mermaid 문법을 사용하여 생성
2. **docs/ 경로 저장**: 생성된 다이어그램은 `docs/` 디렉토리에 적절한 파일명으로 저장
3. **파일명 규칙**:
   - `docs/diagram-name.md` 형식으로 저장
   - 파일명은 영어로 작성하고 하이픈(-) 사용
   - 예: `docs/system-architecture.md`, `docs/data-flow.md`

## 다이어그램 유형별 가이드라인

### 시스템 아키텍처 다이어그램

- 파일명: `docs/system-architecture.md`
- 사용 다이어그램: `graph TB` 또는 `graph LR`
- 포함 요소: 컴포넌트, 데이터 플로우, 의존성 관계

### 데이터 플로우 다이어그램

- 파일명: `docs/data-flow.md`
- 사용 다이어그램: `sequenceDiagram` 또는 `flowchart TD`
- 포함 요소: 데이터 흐름, API 호출, 상태 변화

### 컴포넌트 구조 다이어그램

- 파일명: `docs/component-structure.md`
- 사용 다이어그램: `graph TD` 또는 `classDiagram`
- 포함 요소: 컴포넌트 계층, props, 상태 관리

### 개발 프로세스 다이어그램

- 파일명: `docs/development-process.md`
- 사용 다이어그램: `gantt`, `flowchart TD`
- 포함 요소: 개발 단계, 타임라인, 의존성

### 데이터베이스 스키마 다이어그램

- 파일명: `docs/database-schema.md`
- 사용 다이어그램: `erDiagram`
- 포함 요소: 테이블, 관계, 필드

## 다이어그램 생성 프로세스

1. **요청 분석**: 사용자의 요청을 분석하여 적절한 다이어그램 유형 결정
2. **파일명 결정**: 다이어그램 유형에 따라 적절한 파일명 생성
3. **Mermaid 코드 작성**: 요청에 맞는 Mermaid 다이어그램 코드 생성
4. **파일 저장**: `docs/` 경로에 마크다운 파일로 저장
5. **스타일링 적용**: 필요시 다이어그램에 색상 및 스타일 적용

## Mermaid 다이어그램 예시

### 시스템 아키텍처 예시

```mermaid
graph TB
    subgraph "Frontend"
        A[React App] --> B[Components]
        B --> C[State Management]
    end

    subgraph "Backend"
        D[API Server] --> E[Database]
    end

    A --> D

    style A fill:#e1f5fe
    style D fill:#f3e5f5
```

### 데이터 플로우 예시

```mermaid
sequenceDiagram
    participant User
    participant Frontend
    participant Backend
    participant Database

    User->>Frontend: 액션 수행
    Frontend->>Backend: API 호출
    Backend->>Database: 데이터 조회
    Database-->>Backend: 결과 반환
    Backend-->>Frontend: 응답 전송
    Frontend-->>User: UI 업데이트
```

## 파일 저장 형식

생성된 파일은 다음 형식을 따라야 합니다:

````markdown
# 다이어그램 제목

## 개요

다이어그램에 대한 간단한 설명

## 다이어그램

```mermaid
[다이어그램 코드]
```
````

## 설명

다이어그램의 각 요소에 대한 상세 설명

## 참고사항

추가적인 정보나 주의사항

```

## 주의사항

1. **중복 파일 방지**: 기존 파일이 있다면 덮어쓰기 전에 확인
2. **적절한 복잡도**: 다이어그램이 너무 복잡하지 않도록 단계별로 분할 고려
3. **가독성**: 색상과 스타일을 사용하여 가독성 향상
4. **문서화**: 다이어그램과 함께 충분한 설명 제공

## 키워드 감지

다음 키워드가 포함된 요청은 다이어그램 생성으로 인식:
- 다이어그램, diagram
- 아키텍처, architecture
- 플로우차트, flowchart
- 시각화, visualization
- 구조도, structure
- 프로세스, process
- 시퀀스, sequence
- ERD, er-diagram
- UML, uml-diagram
```
